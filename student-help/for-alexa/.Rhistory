nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation)-12)]
nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation)-13)]
nation$val[13:nrow(nation)]
length(nation[13:nrow(nation)],)
(nation[13:nrow(nation)],)
(nation[13:nrow(nation),]
)
nation[13:nrow(nation),]
nation$val[13:nrow(nation)]
nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation) - 12]
nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation) - 12)]
nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation) - 13)]
nation$val[13:nrow(nation)]/nation$val[1:(nrow(nation) - 11)]
as.numeric(nation$val[13:nrow(nation)])
as.numeric(nation$val[13:nrow(nation)])/as.numeric(nation$val[1:(nrow(nation) - 12)])
100*as.numeric(nation$val[13:nrow(nation)])/as.numeric(nation$val[1:(nrow(nation) - 12)])
yoy <- 100*as.numeric(nation$val[13:nrow(nation)])/as.numeric(nation$val[1:(nrow(nation) - 12)])
barplot(yoy)
yoy <- 100 - 100*as.numeric(nation$val[13:nrow(nation)])/as.numeric(nation$val[1:(nrow(nation) - 12)])
barplot(yoy)
yoy <- 100*as.numeric(nation$val[13:nrow(nation)])/as.numeric(nation$val[1:(nrow(nation) - 12)]) - 100
barplot(yoy)
(100*as.numeric(nation$val[13:nrow(nation)])-as.numeric(nation$val[1:(nrow(nation) - 12)]))/as.numeric(nation$val[1:(nrow(nation) - 12)])
(as.numeric(nation$val[13:nrow(nation)])-as.numeric(nation$val[1:(nrow(nation) - 12)]))/as.numeric(nation$val[1:(nrow(nation) - 12)])
100 * (as.numeric(nation$val[13:nrow(nation)])-as.numeric(nation$val[1:(nrow(nation) - 12)]))/as.numeric(nation$val[1:(nrow(nation) - 12)])
byoy <- 100 * (as.numeric(nation$val[13:nrow(nation)])-as.numeric(nation$val[1:(nrow(nation) - 12)]))/as.numeric(nation$val[1:(nrow(nation) - 12)])
head(d3data)
pdf(file="print.pdf")
barplot(byoy)
dev.off()
tail(data)
tail(d3data)
lookup
lookup2
setwd("./~Desktop")
setwd("~/Desktop")
setwd("~/Desktop/for-alexa")
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
base <- "http://www.fight4rx.org/map/getpharms3.php?address="#
#
zip <- 11232#
url <- paste(base, zip, sep="")
ur;
url
install.packages("RJSONIO")
library(RJSONIO)
fromJSON(readLines(URL))
fromJSON(readLines(url))
f <- fromJSON(readLines(url))
names(f)
f
length(f)
f[1]
f[2]
f[[1]]
length(f[[1]])
first <- f[[1]]
first[[1]]
sapply(first, function(x) { x[[1]]$id })
sapply(first, function(x) { x[[1]] })
sapply(first, function(x) { x[["id"]] })
getAttribute <- function(str, json) {#
  return sapply(json, function(x) { x[[str]] })#
}#
#
base <- "http://www.fight4rx.org/map/getpharms3.php?address="#
zip <- 11232#
url <- paste(base, zip, sep="")#
first <- f[[1]]#
zips <-   getAttribute("id")#
names <-  getAttribute("name")#
addresses <-  getAttribute("address")#
lats <-  getAttribute("lat")#
lngs <-  getAttribute("lng")#
cities <- getAttribute("city")
getAttribute <- function(str, json) {#
  return sapply(json, function(x) { x[[str]] })#
}
json <- first
str <- "id"
sapply(json, function(x) { x[[str]] })
getAttribute <- function(str, json) {#
  return (sapply(json, function(x) { x[[str]] }))#
}
zips <-   getAttribute("id", first)#
names <-  getAttribute("name", first)#
addresses <-  getAttribute("address", first)#
lats <-  getAttribute("lat", first)#
lngs <-  getAttribute("lng", first)#
cities <- getAttribute("city", first)
cities
df <- data.frame(zip=zips, name=names, addr=addresses, lat=lays, lng=lngs, city=cities)
df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)
df
rbind(df, df)
zips <- read.delim("data/nyzips.txt")
zips
head(zips)
sprintf("%05d", zips$raw)
zipsraw <- read.delim("data/nyzips.txt")#
#
zips <- sprintf("%05d", zipsraw$raw)
zips
i <- "11232"
print(paste(i, length(zips), sep="/" ) )
data <- NULL#
#
for (i in 1:2) {#
#
  print(paste(i, length(zips), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
  first <- f[[1]]#
#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  data <- rbind(data, df)#
#
}
data
length(zips)
i <- 1
print(paste(i, length(zips), sep="/" ) )
zip <- zips[i]
zip
url <- paste(base, zip, sep="")
url
data <- NULL#
#
for (i in 1:2) {#
#
  print(paste(i, length(zips), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
  first <- f[[1]]#
#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  data <- rbind(data, df)#
#
}
zips
zips <- sprintf("%05d", zipsraw$raw)
zips
length(zips)
data <- NULL#
#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zips), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
  first <- f[[1]]#
#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  data <- rbind(data, df)#
#
}
zipsraw <- read.delim("data/nyzips.txt")#
#
zip5s <- sprintf("%05d", zipsraw$raw)
zip5s
data <- NULL#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zips), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
  first <- f[[1]]#
#
  # make the data#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  # make a df#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  #join to the main table#
  data <- rbind(data, df)#
#
}
data
data <- NULL#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
  first <- f[[1]]#
#
  # make the data#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  # make a df#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  #join to the main table#
  data <- rbind(data, df)#
#
}
data
tail(data)
unique(data$name)
length(unique(data$name))
table)data$name
table(data$name)
table(as.character(data$name))
nrow(data)
nrow(zip5s)
length(zip5s)
head(data)
head(data, n=10)
table(duplicated(data))
head(data, n=20)
head(data, n=25)
url
tail(zip5s)
zipsraw <- read.delim("data/nyzips.txt")#
zip5s <- sprintf("%05d", zipsraw$raw)#
base <- "http://www.fight4rx.org/map/getpharms3.php?address="#
#
data <- NULL#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")#
#
  f <- fromJSON(readLines(url))#
  first <- f[[1]]#
#
  # make the data#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  # make a df#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  #join to the main table#
  data <- rbind(data, df)#
#
}
zip5s
zip5s[2]
i <- 2
print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zips[i]#
  url <- paste(base, zip, sep="")
url
print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zip5s[i]#
  url <- paste(base, zip, sep="")
url
zipsraw <- read.delim("data/nyzips.txt")#
zip5s <- sprintf("%05d", zipsraw$raw)#
base <- "http://www.fight4rx.org/map/getpharms3.php?address="#
#
data <- NULL#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zip5s[i]#
  url <- paste(base, zip, sep="")#
#
  f <- fromJSON(readLines(url))#
  first <- f[[1]]#
#
  # make the data#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
#
  # make a df#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  #join to the main table#
  data <- rbind(data, df)#
#
}
i <- 18
print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zip5s[i]#
  url <- paste(base, zip, sep="")
url
f <- fromJSON(readLines(url))
fromJSON
f <- fromJSON(readLines(url))
f
?fromJson
?fromJSON
!f[[1]]
f
f <- fromJSON(readLines(url))
f
url
??try
options(show.error.messages = FALSE)#
try(log("a"))
print(.Last.value)#
options(show.error.messages = TRUE)
url
f
url
fromJSON(readLines(url))
b <- fromJSON(readLines(url))
b
vari <- 1#
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished")) #
tryCatch(stop("fails"), error = function(e) print(vari), finally=print("finished"))
vari <- 1#
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished")) #
tryCatch(stop("fails"), error = function(e) print(frmoJSON(readLines(url))), finally=print("finished"))
vari <- 1#
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished")) #
tryCatch(stop("fails"), error = function(e) print(fromJSON(readLines(url))), finally=print("finished"))
try(fromJSON(readLines(url)))
try(fromJSON(readLines(url)), silent=T)
t <- try(fromJSON(readLines(url)), silent=T))
t <- try(fromJSON(readLines(url)), silent=T)
if()
if("try-error", print("moo"))
if("try-error"%in%class(t) ) print("moo"))
if("try-error"%in%class(t) ) print("moo")
ftry <- try(fromJSON(readLines(url)), silent=T)
zip
if  ("try-error" %in% class(ftry))  {#
#
    df <- data.frame(zip=zip, name=NA, addr=NA, lat=NA, lng=NA, city=NA)#
  }
df
if  ("try-error" %in% class(ftry))  {#
    df <- data.frame(zip=zip, name=NA, addr=NA, lat=NA, lng=NA, city=NA)#
  }#
#
  else {#
#
    first <- f[[1]]#
#
    # make the data#
    zips <-   getAttribute("id", first)#
    names <-  getAttribute("name", first)#
    addresses <-  getAttribute("address", first)#
    lats <-  getAttribute("lat", first)#
    lngs <-  getAttribute("lng", first)#
    cities <- getAttribute("city", first)#
#
    # make a df#
    df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
#
  }
if  ("try-error" %in% class(ftry))  {#
    df <- data.frame(zip=zip, name=NA, addr=NA, lat=NA, lng=NA, city=NA)#
  }
else#
#
    first <- f[[1]]#
#
    # make the data#
    zips <-   getAttribute("id", first)#
    names <-  getAttribute("name", first)#
    addresses <-  getAttribute("address", first)#
    lats <-  getAttribute("lat", first)#
    lngs <-  getAttribute("lng", first)#
    cities <- getAttribute("city", first)#
#
    # make a df#
    df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)
zip = "11232"
print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zip5s[i]#
  url <- paste(base, zip, sep="")#
#
  ftry <- try(fromJSON(readLines(url)), silent=T)
if("try-error" %in% class(ftry))  {#
      print("NA")#
  } else {#
    first <- ftry[[1]]#
  }
zip
zip <- "11232"
url <- paste(base, zip, sep="")
url
ftry <- try(fromJSON(readLines(url)), silent=T)
ftry
if("try-error" %in% class(ftry))  {#
      print("errer")#
  } else {#
    print("all good")#
  }
zipsraw <- read.delim("data/nyzips.txt")#
zip5s <- sprintf("%05d", zipsraw$raw)#
base <- "http://www.fight4rx.org/map/getpharms3.php?address="#
#
data <- NULL#
for (i in 1:length(zip5s)) {#
#
  print(paste(i, length(zip5s), sep="/" ) )#
  zip <- zip5s[i]#
  url <- paste(base, zip, sep="")#
#
  ftry <- try(fromJSON(readLines(url)), silent=T)#
#
  if("try-error" %in% class(ftry))  {#
    df <- data.frame(zip=zip, name=NA, addr=NA, lat=NA, lng=NA, city=NA)#
  } else {#
    print("all good")#
  first <- ftry[[1]]#
  zips <-   getAttribute("id", first)#
  names <-  getAttribute("name", first)#
  addresses <-  getAttribute("address", first)#
  lats <-  getAttribute("lat", first)#
  lngs <-  getAttribute("lng", first)#
  cities <- getAttribute("city", first)#
  # make a df#
  df <- data.frame(zip=zips, name=names, addr=addresses, lat=lats, lng=lngs, city=cities)#
  }#
#
    # make the data#
#
  #join to the main table#
  data <- rbind(data, df)#
#
}
warnings()
nrow(data)
tail(data)
head(data)
unique(data$name)
nrow(unique(data$name))
table(unique(data$name))
length(unique(data$name))
write.csv(data, file="scraped-zips.csv")
library(maptools)
shapes <- readShapePoly("shapes/County.shp")
plot(shapes)
data <- read.csv("scraped-zips.csv")
head(data)
maptest <- data
coordinates(maptest) <- c("lng", "lat")#
proj4string(maptest) <- CRS("+proj=longlat")
data$lat
is.na(data$lat)
table(is.na(data$lat))
data[is.na(data$lat),]
table(duplicated(data))
table(data$zip)
head(data)
data <- data[2:ncol(data),]
head(data)
names(data)
data <- read.csv("scraped-zips.csv")#
#
data <- data[,2:ncol(data)]
head(data)
table(duplicated(data))
d2 <- data[!duplicated[data],]
d2 <- data[,!duplicated[data]]
duplicated[data]
d2 <- data[,!duplicated(data)]
d2 <- data[!duplicated(data),]
nrow(d2)
maptest <- d2#
coordinates(maptest) <- c("lng", "lat")
d2[!is.na(d2$lat),]
dim(d2[!is.na(d2$lat),])
nrow(d2)
d2 <- d2[!is.na(d2$lat),]
nrow(d2)
maptest <- d2#
coordinates(maptest) <- c("lng", "lat")
proj4string(maptest) <- CRS("+proj=longlat")
ogrInfo(dsn = "shapes", "County")
)
library(rgdal)
ogrInfo(dsn = "shapes", "County")
proj4string(ns) <- "+proj=utm +zone=18 +datum=NAD83 +units=m +no_defs "
proj4string(shapes) <- "+proj=utm +zone=18 +datum=NAD83 +units=m +no_defs "
new_shapes <- spTransform(shapes, CRS("+proj=longlat"))
plot(newshapes)
plot(new_shapes)
head(data)
head(maptest)
maptest
points(coordinates(maptest))
plot(new_shapes)
points(coordinates(maptest), pch=16, col="red", cex=.5)
install.packages(sp)
install.packages("sp")
library(sp)
help(readOGR)
help(overlay)
?SpatialPoints
plot(shapes)
moo <- readShapeSpatial("shapes/County.shp")
plot(moo)
nrow(data)
ls()
nrow(d2)
write.csv(d2, file="cleaned-scrape.csv")
